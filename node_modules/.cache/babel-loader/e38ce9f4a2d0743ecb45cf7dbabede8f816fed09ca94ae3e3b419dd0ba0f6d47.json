{"ast":null,"code":"var _jsxFileName = \"/Users/programsky/Documents/GitHub/Damoa_sky/src/component/NoticeBox.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from '../css/Notice.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NoticeBox() {\n  _s();\n  const [notices, setNotices] = useState([]);\n  useEffect(() => {\n    const fetchNotices = async () => {\n      try {\n        const response = await fetch(`${baseURL}/api/notice_select`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch notices');\n        }\n        const data = await response.json();\n        setNotices(data);\n      } catch (error) {\n        console.error('Error fetching notices:', error);\n      }\n    };\n    fetchNotices();\n  }, []); // Empty dependency array to ensure the effect runs only once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: notices.map((notice, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.box,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: `${styles['text-block']} ${styles.title}`,\n        children: notice.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles['text-block'],\n        children: notice.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n_s(NoticeBox, \"DxECLkJNQemgnMXjzk6SG1kQ1u0=\");\n_c = NoticeBox;\nlet baseURL = '';\nif (process.env.NODE_ENV === 'development') {\n  // If in development environment, use local IP\n  baseURL = 'http://121.139.20.242:5100';\n}\nvar _c;\n$RefreshReg$(_c, \"NoticeBox\");","map":{"version":3,"names":["React","useState","useEffect","styles","jsxDEV","_jsxDEV","NoticeBox","_s","notices","setNotices","fetchNotices","response","fetch","baseURL","ok","Error","data","json","error","console","className","container","children","map","notice","index","box","title","fileName","_jsxFileName","lineNumber","columnNumber","content","_c","process","env","NODE_ENV","$RefreshReg$"],"sources":["/Users/programsky/Documents/GitHub/Damoa_sky/src/component/NoticeBox.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from '../css/Notice.module.css';\n\nexport default function NoticeBox() {\n    const [notices, setNotices] = useState([]);\n\n    useEffect(() => {\n        const fetchNotices = async () => {\n            try {\n                const response = await fetch(`${baseURL}/api/notice_select`);\n                if (!response.ok) {\n                    throw new Error('Failed to fetch notices');\n                }\n                const data = await response.json();\n                setNotices(data);\n            } catch (error) {\n                console.error('Error fetching notices:', error);\n            }\n        };\n\n        fetchNotices();\n    }, []); // Empty dependency array to ensure the effect runs only once on component mount\n\n    return (\n        <div className={styles.container}>\n            {notices.map((notice, index) => (\n                <div key={index} className={styles.box}>\n                    <p className={`${styles['text-block']} ${styles.title}`}>{notice.title}</p>\n                    <p className={styles['text-block']}>{notice.content}</p>\n                </div>\n            ))}\n        </div>\n    );\n}\n\nlet baseURL = '';\nif (process.env.NODE_ENV === 'development') {\n    // If in development environment, use local IP\n    baseURL = 'http://121.139.20.242:5100';\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACZ,MAAMQ,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAQ,oBAAmB,CAAC;QAC5D,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;QAC9C;QACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClCR,UAAU,CAACO,IAAI,CAAC;MACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACnD;IACJ,CAAC;IAEDR,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIL,OAAA;IAAKe,SAAS,EAAEjB,MAAM,CAACkB,SAAU;IAAAC,QAAA,EAC5Bd,OAAO,CAACe,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACvBpB,OAAA;MAAiBe,SAAS,EAAEjB,MAAM,CAACuB,GAAI;MAAAJ,QAAA,gBACnCjB,OAAA;QAAGe,SAAS,EAAG,GAAEjB,MAAM,CAAC,YAAY,CAAE,IAAGA,MAAM,CAACwB,KAAM,EAAE;QAAAL,QAAA,EAAEE,MAAM,CAACG;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3E1B,OAAA;QAAGe,SAAS,EAAEjB,MAAM,CAAC,YAAY,CAAE;QAAAmB,QAAA,EAAEE,MAAM,CAACQ;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAFlDN,KAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGV,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACxB,EAAA,CA9BuBD,SAAS;AAAA2B,EAAA,GAAT3B,SAAS;AAgCjC,IAAIO,OAAO,GAAG,EAAE;AAChB,IAAIqB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;EACxC;EACAvB,OAAO,GAAG,4BAA4B;AAC1C;AAAC,IAAAoB,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}